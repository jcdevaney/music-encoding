<?xml version="1.0" encoding="UTF-8"?>
<project name="music-encoding" default="dist">
    <property name="github.sha" value="github.sha">
        <!-- string    external    The current GitHub sha -->
    </property>
    <property name="github.event_name" value="github.event_name">
        <!--string    external    The name of the event that triggered the workflow run. e.g.: push, pull_request; cf. https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows -->
    </property>
    <property name="github.ref" value="github.ref">
        <!-- string    external    The branch or tag ref that triggered the workflow run. For branches this in the format refs/heads/<branch_name>, and for tags it is refs/tags/<tag_name> -->
    </property>
    <loadresource property="github.ref-type">
        <string value="${github.ref}"/>
        <filterchain>
            <tokenfilter>
                <replaceregex pattern="([^\/]+\/)([^\/]+)(\/[^\/]+)" replace="\2"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <loadresource property="github.ref-name">
        <string value="${github.ref}"/>
        <filterchain>
            <tokenfilter>
                <replaceregex pattern="([^\/]+\/)+" replace=""/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <loadresource property="windir">
        <string value="${basedir}"/>
        <filterchain>
            <tokenfilter>
                <replaceregex pattern="\\" replace="/"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <property name="version" value="dev"/>
    <!-- in XSLT version = att.meiversion defaultVal -->
    <property name="dir.build" value="build"/>
    <property name="dir.dist" value="dist"/>
    <property name="dir.dist.guidelines" value="${basedir}/${dir.dist}/guidelines/${version}"/>
    <loadresource property="dir.dist.guidelines.win">
        <string value="${dir.dist.guidelines}"/>
        <filterchain>
            <tokenfilter>
                <replaceregex pattern="\\" replace="/"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <condition property="dir.dist.guidelines.cross_platform" value="${dir.dist.guidelines}" else="file:/${dir.dist.guidelines.win}">
        <not>
            <os family="windows"/>
        </not>
    </condition>
    <property name="dir.dist.schemata" value="${basedir}/${dir.dist}/schemata/${version}"/>
    <condition property="canonicalized.source.path.cross_platform" value="${basedir}/${dir.build}/mei-source_canonicalized.xml" else="file:/${windir}/${dir.build}/mei-source_canonicalized.xml">
        <not>
            <os family="windows"/>
        </not>
    </condition>
    <property name="dir.lib" value="${basedir}/lib"/>
    <property name="dir.lib.saxon" value="${dir.lib}/saxon"/>
    <property name="dir.lib.xerces" value="${dir.lib}/xerces"/>
    <property name="saxon.download.version" value="Saxon-HE/10/Java/SaxonHE10-5J"/>
    <property name="saxon.jar.file" value="saxon-he-10.5.jar"/>
    <property name="xerces.version" value="21.1.0.2"/>
    <property name="xerces.jar.file" value="oxygen-patched-xerces-${xerces.version}.jar"/>
    <path id="mei.classpath">
        <pathelement path="${dir.lib.xerces}/${xerces.jar.file}"/>
        <pathelement path="${dir.lib.saxon}/${saxon.jar.file}"/>
    </path>
    <property name="java.class.path" value="" classpathref="mei.classpath"/>

    <target name="help">
        <echo>================================================</echo>
        <echo>= Welcome to the MEI music-encoding ant-script! =</echo>
        <echo>================================================</echo>
        <echo/>
        <echo>This is the default build target with some usage information.</echo>
        <echo>You can also call this via 'ant help'</echo>
        <echo/>
        <echo>To build distribution of canonicalized source, compiled ODDs and customization RNGs run:</echo>
        <echo>ant init</echo>
        <echo>ant -lib lib/saxon/saxon-he-10.5.jar</echo>
        <echo/>
        <echo>run 'ant -projecthelp' or 'ant -p' to get more information on the available build targets</echo>
        <echo/>
        <echo>The following buildproperties are configured in your environment:</echo>
        <echo/>
    </target>

    <target name="clean">
        <delete dir="build"/>
        <delete dir="dist"/>
        <delete dir="temp"/>
    </target>

    <target name="echo-properties" description="Outputs ">
        <echoproperties/>
    </target>

    <target name="get-local-git-sha" description="Get the local git sha">
        <exec executable="git" outputproperty="github.sha.local">
            <arg value="describe"/>
            <arg value="--match=NeVeRmAtCh"/>
            <arg value="--always"/>
            <arg value="--abbrev"/>
            <arg value="--dirty"/>
        </exec>
        <echo>Local github.sha: ${github.sha.local}</echo>
    </target>
    
    <target name="get-local-git-branch" description="Retrieves the current git branch via commandline">
        <exec executable="git" outputproperty="github.branch.local">
            <arg value="branch"/>
            <arg value="--show-current"/>
        </exec>
        <echo>Local github.branch: ${github.branch.local}</echo>
    </target>
    
    <target name="get-local-git-revision">
        <description>Get the current git revision</description>
        <exec executable="git" outputproperty="github.revision.local">
            <arg value="describe"/>
            <arg value="--tags"/>
            <arg value="--always"/>
            <arg value="HEAD"/>
        </exec>
        <echo>Local github.revision: ${github.revision.local}</echo>
    </target>

    <target name="reset">
        <delete dir="lib"/>
        <antcall target="clean"/>
    </target>

    <target name="init" description="initializes the build, e.g. downloads saxon">
        <available property="xerces-available" file="${dir.lib.xerces}/${xerces.jar.file}"/>
        <available property="saxon-available" file="${dir.lib.saxon}/${saxon.jar.file}"/>
        <mkdir dir="${dir.lib}"/>
        <antcall target="saxon-prepare"/>
        <antcall target="xerces-download"/>
        <echo>initialized</echo>
    </target>

    <target name="saxon-download" unless="${saxon-available}">
        <mkdir dir="temp"/>
        <get src="https://sourceforge.net/projects/saxon/files/${saxon.download.version}.zip/download" dest="temp/"/>
        <!-- TODO check for newer releases-->
    </target>

    <target name="saxon-prepare" depends="saxon-unzip" unless="${saxon-available}">
        <delete dir="temp/"/>
    </target>

    <target name="saxon-unzip" depends="saxon-download" unless="${saxon-available}">
        <mkdir dir="${dir.lib.saxon}"/>
        <unzip src="temp/download" overwrite="true" dest="${dir.lib.saxon}"/>
    </target>

    <target name="xerces-download" unless="${xerces-available}">
        <mkdir dir="${dir.lib.xerces}"/>
        <get src="https://www.oxygenxml.com/maven/com/oxygenxml/oxygen-patched-xerces/${xerces.version}/${xerces.jar.file}" dest="${dir.lib.xerces}"/>
        <!--TODO update to latest version -->
    </target>

    <target name="canonicalize-source" description="Canonicalizes the mei-source.xml, i.e. resolves xincludes and puts result in build/mei-source_canonicalized.xml" depends="init">
        <java classname="net.sf.saxon.Transform" classpathref="mei.classpath">
            <arg value="-s:${basedir}/source/mei-source.xml"/>
            <arg value="-xsl:${basedir}/utils/canonicalization/copy.xsl"/>
            <arg value="-o:${dir.build}/mei-source_canonicalized.xml"/>
            <arg value="-xi:on"/>
        </java>
    </target>

    <target name="build-compiled-odd" depends="canonicalize-source">
        <basename property="odd.basename" file="${customization.path}" suffix=".xml"/>
        <echo>${odd.basename}</echo>
        <ant dir="submodules/Stylesheets/odd/" antfile="build-to.xml" target="go" inheritall="true">
            <property name="inputFile" value="${customization.path}"/>
            <property name="outputFile" value="${dir.dist.schemata}/${odd.basename}_compiled.odd"/>
            <property name="defaultSource" value="${canonicalized.source.path.cross_platform}"/>
            <property name="verbose">true</property>
            <property name="summaryDoc" value="false"/>
            <property name="suppressTEIexamples" value="true"/>
        </ant>
    </target>

    <target name="build-rng" depends="canonicalize-source">
        <basename property="odd.basename" file="${customization.path}" suffix=".xml"/>
        <echo>building rng ${odd.basename} from ${customization.path}</echo>
        <ant dir="submodules/Stylesheets/relaxng/" antfile="build-to.xml" target="dist" inheritall="true" usenativebasedir="true"><!-- check whether nativebasdir is required -->
            <property name="inputFile" value="${customization.path}"/>
            <property name="outputFile" value="${dir.dist.schemata}/${odd.basename}.rng"/>
            <property name="defaultSource" value="${canonicalized.source.path.cross_platform}"/>
            <property name="verbose">true</property>
        </ant>
    </target>

    <target name="build-guidelines-html" depends="canonicalize-source, get-local-git-sha, get-local-git-branch, get-local-git-revision">
        <!-- TODO check dependency try with mei-source.xml -->
        <basename property="odd.basename" file="${customization.path}" suffix=".xml"/>
        <echo message="building HTML guidelines for ${odd.basename} from ${customization.path} on branch ${github.branch.local}"/>
        <echo>github.sha: ${github.sha}</echo>
        <echo>github.sha.local: ${github.sha.local}</echo>
        <condition property="hash" value="${github.sha}" else="${github.sha.local}">
            <not>
                <equals arg1="${github.sha}" arg2="github.sha" forcestring="true"/>
            </not>
        </condition>
        <condition property="revision" value="${github.ref-name}" else="${github.revision.local}">
            <equals arg1="${github.ref-type}" arg2="tags"/>
        </condition>
        <java classname="net.sf.saxon.Transform" classpathref="mei.classpath" failonerror="true">
            <arg value="-s:${dir.build}/mei-source_canonicalized.xml"/>
            <arg value="-xsl:${basedir}/utils/guidelines_xslt/odd2html.xsl"/>
            <arg value="-xi:on"/>
            <arg value="output.folder=${dir.dist.guidelines.cross_platform}/"/>
            <arg value="hash=${hash}"/>
            <arg value="branch=${github.branch.local}"/>
            <arg value="revision=${revision}"/>
            <arg value="basedir=${basedir}"/>
        </java>
        <antcall target="copy-guidelines-html-assets"/>
    </target>
    <target name="copy-guidelines-html-assets">
        <copy todir="${dir.dist.guidelines.cross_platform}/web/js">
            <fileset dir="source/js"/>
        </copy>
        <copy todir="${dir.dist.guidelines.cross_platform}/web/css">
            <fileset dir="source/css/screen"/>
        </copy>
        <copy todir="${dir.dist.guidelines.cross_platform}/web/images">
            <fileset dir="source/images">
                <include name="**/*"/>
            </fileset>
        </copy>
        <!-- generated images can only be copied after they're generated, which depends on running a Docker image independend of Ant. 
            Needs to be taken care of elsewhere -->
    </target>

    <target name="build-customizations">
        <antcall target="build-rng">
            <param name="customization.path" value="${basedir}/customizations/mei-all.xml"/>
        </antcall>
        <antcall target="build-rng">
            <param name="customization.path" value="${basedir}/customizations/mei-all_anyStart.xml"/>
        </antcall>
        <antcall target="build-rng">
            <param name="customization.path" value="${basedir}/customizations/mei-basic.xml"/>
        </antcall>
        <antcall target="build-rng">
            <param name="customization.path" value="${basedir}/customizations/mei-CMN.xml"/>
        </antcall>
        <antcall target="build-rng">
            <param name="customization.path" value="${basedir}/customizations/mei-Mensural.xml"/>
        </antcall>
        <antcall target="build-rng">
            <param name="customization.path" value="${basedir}/customizations/mei-Neumes.xml"/>
        </antcall>
    </target>

    <target name="build-compiled-odds">
        <antcall target="build-compiled-odd">
            <param name="customization.path" value="${basedir}/customizations/mei-all.xml"/>
        </antcall>
        <antcall target="build-compiled-odd">
            <param name="customization.path" value="${basedir}/customizations/mei-all_anyStart.xml"/>
        </antcall>
        <antcall target="build-compiled-odd">
            <param name="customization.path" value="${basedir}/customizations/mei-basic.xml"/>
        </antcall>
        <antcall target="build-compiled-odd">
            <param name="customization.path" value="${basedir}/customizations/mei-CMN.xml"/>
        </antcall>
        <antcall target="build-compiled-odd">
            <param name="customization.path" value="${basedir}/customizations/mei-Mensural.xml"/>
        </antcall>
        <antcall target="build-compiled-odd">
            <param name="customization.path" value="${basedir}/customizations/mei-Neumes.xml"/>
        </antcall>
    </target>

    <target name="dist" depends="init">
        <!-- TODO does not work with depends="init" only works if init run before -->
        <!-- TODO if depends init works add to all other targets and introduce global initialized param so that init will only be reexecuted if init not run before -->
        <classfileset refid="mei.classpath"/>
        <antcall target="build-customizations"/>
        <antcall target="build-compiled-odds"/>
        <antcall target="build-guidelines-html"/>
    </target>

</project>
